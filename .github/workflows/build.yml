# Unique name for this workflow
name: Build

# Definition when the workflow should run
on:
  workflow_dispatch:
  push:
    branches:
      - main

# Jobs to be executed
jobs:
  build:
    name: Build package
    runs-on: ubuntu-latest
    container: dxatscale/sfpowerscripts
    steps:
      # Checkout the code
      - name: "Checkout source code"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Copy Auth URL to file
      - name: "Copy Auth URL to file"
        shell: bash
        run: |
          echo "${{ secrets.DEVHUB_AUTH_URL }}" > ./AUTH_URL
      # Authenticate dev hub
      - name: "Authenicate Org"
        run: "sfdx auth:sfdxurl:store -f ./AUTH_URL -a devhub"

      # Create Package
      - id: createPackage
        name: "Create Package"
        run: |
          sfdx force:package:version:create -c -d pkg/ -f config/project-scratch-def.json -x -v devhub -w 300 --json > packageResult.json
          result=$(jq .status packageResult.json)
          test $result -eq 0
          packageVersionId=$(jq .result.SubscriberPackageVersionId packageResult.json)
          echo "PACKAGE_VERSION_ID=${packageVersionId}" >> $GITHUB_ENV
          packageId=$(jq .result.Package2Id packageResult.json)
          echo "PACKAGE_ID=${packageId}" >> $GITHUB_ENV
      - name: "Fetch Test Results"
        run: |
          testCoverage=$( sfdx force:package:version:report -p ${{ env.PACKAGE_VERSION_ID }} -v devhub --json | jq .result.CodeCoverage.apexCodeCoveragePercentage )
          echo "TEST_COVERAGE=${testCoverage}" >> $GITHUB_ENV
      - name: Publish Test Results
        uses: schneegans/dynamic-badges-action@v1.1.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 37875c31d8b3c3c04cf1f1980778a67d
          filename: test.json
          label: Code Coverage
          message: ${{ env.TEST_COVERAGE }}%
          color: green
          namedLogo: "Salesforce"
          isError: ${{ env.TEST_COVERAGE < 75}}

      # Promote Package and create release
      - name: Promote Package
        if: contains(github.event.head_commit.message, 'release:')
        run: |
          sfdx force:package:version:promote -n -p ${{ env.PACKAGE_VERSION_ID }} -v devhub
      - name: Get Version Details
        if: contains(github.event.head_commit.message, 'release:')
        run: |
          sfdx force:package:version:list -v devhub -p ${{ env.PACKAGE_ID }} --json | jq . > packageList.json
          versionId=$(jq '.result[] | select(.SubscriberPackageVersionId==${{ env.PACKAGE_VERSION_ID }}) | .Version ' packageList.json | tr -d '"')
          echo "TAG=${versionId}" >> $GITHUB_ENV
      - name: Create Release
        if: contains(github.event.head_commit.message, 'release:')
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TAG }}

      - name: Update README
        if: contains(github.event.head_commit.message, 'release:')
        run: |
          sed -i -e "s/04t[[:alnum:]]\{15\}/${{ env.PACKAGE_VERSION_ID }}/" README.md
          git config user.name "build.bot"
          git config user.email "<>"
          git add README.md
          git commit -m "updating README with new version"
          git push
